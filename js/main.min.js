/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./src/scripts/utils/menu.js
function menu() {
  (function () {
    var target = document.querySelector(".menu__line");
    var links = document.querySelectorAll(".menu__item a");

    function mouseenterFunc() {
      if (!this.parentNode.classList.contains("hover")) {
        for (var i = 0; i < links.length; i++) {
          if (links[i].parentNode.classList.contains("hover")) {
            links[i].parentNode.classList.remove("hover");
          }
        }

        this.parentNode.classList.add("hover");
        var width = this.getBoundingClientRect().width;
        var height = this.getBoundingClientRect().height;
        var left = this.getBoundingClientRect().left;
        var top = this.getBoundingClientRect().top + window.pageYOffset;
        target.style.width = "".concat(width + 10, "px"); // target.style.height = `${height}px`;

        target.style.left = "".concat(left - 5, "px");
        target.style.top = "".concat(top + height, "px");
        target.style.transform = "none";
      }
    }

    for (var i = 0; i < links.length; i++) {
      links[i].addEventListener("click", function (e) {
        return e.preventDefault();
      });
      links[i].addEventListener("mouseenter", mouseenterFunc);
    }

    function resizeFunc() {
      var hover = document.querySelector(".mynav li.hover");

      if (hover) {
        var left = hover.getBoundingClientRect().left + window.pageXOffset;
        var top = hover.getBoundingClientRect().top + window.pageYOffset;
        target.style.left = "".concat(left, "px");
        target.style.top = "".concat(top, "px");
      }
    }

    window.addEventListener("resize", resizeFunc);
  })();
}
// CONCATENATED MODULE: ./src/scripts/utils/stars.js
function starSky() {
  // var canvas;
  // var context;
  // var canvaH;
  // var canvaW;
  // var stars = [];
  // var fps = 60;
  // var numStars = 700;
  // document.addEventListener("DOMContentLoaded", function () {
  //     const parent = document.querySelector('.welcome')
  //     // Calculate the screen size
  //     canvaH = parent.offsetHeight;
  //     canvaW = parent.offsetWidth;
  //     // Get the canvas
  //     canvas = document.querySelector('#stars');
  //     // Fill out the canvas
  //     canvas.setAttribute('height', canvaH);
  //     canvas.setAttribute('width', canvaW);
  //     context = canvas.getContext('2d');
  //     // Create all the stars
  //     for (var i = 0; i < numStars; i++) {
  //         var x = Math.round(Math.random() * canvaW);
  //         var y = Math.round(Math.random() * canvaH);
  //         var length = 1 + Math.random() * 2.5;
  //         var opacity = Math.random();
  //         // Create a new star and draw
  //         var star = new Star(x, y, length, opacity);
  //         // Add the the stars array
  //         stars.push(star);
  //     }
  //     let animateInterval = setInterval(animate, 1000 / fps);
  // });
  // /**
  //  * Animate the canvas
  //  */
  // function animate() {
  //     context.clearRect(0, 0, canvaW, canvaH);
  //     stars.forEach((el) => {
  //         el.draw(context);
  //     })
  // }
  // /* stop Animation */
  // function stopAnimation() {
  //     clearInterval(animateInterval);
  // }
  // //stopAnimation();
  // function Star(x, y, length, opacity) {
  //     this.x = parseInt(x);
  //     this.y = parseInt(y);
  //     this.length = parseInt(length);
  //     this.opacity = opacity;
  //     this.factor = 1;
  //     this.increment = Math.random() * .03;
  // }
  // Star.prototype.draw = function () {
  //     context.rotate((Math.PI * 1 / 10));
  //     // Save the context
  //     context.save();
  //     // move into the middle of the canvas, just to make room
  //     context.translate(this.x, this.y);
  //     // Change the opacity
  //     if (this.opacity > 1) {
  //         this.factor = -1;
  //     }
  //     else if (this.opacity <= 0) {
  //         this.factor = 1;
  //         this.x = Math.round(Math.random() * canvaW);
  //         this.y = Math.round(Math.random() * canvaH);
  //     }
  //     this.opacity += this.increment * this.factor;
  //     context.beginPath()
  //     for (var i = 5; i--;) {
  //         context.lineTo(0, this.length);
  //         context.translate(0, this.length);
  //         context.rotate((Math.PI * 2 / 10));
  //         context.lineTo(0, - this.length);
  //         context.translate(0, - this.length);
  //         context.rotate(-(Math.PI * 6 / 10));
  //     }
  //     context.lineTo(0, this.length);
  //     context.closePath();
  //     context.fillStyle = "rgba(255, 255, 255, " + this.opacity + ")";
  //     context.shadowBlur = 5;
  //     context.shadowColor = '#fff';
  //     context.fill();
  //     context.restore();
  // }
  (function () {
    var canvas = document.querySelector('#stars');
    var context = canvas.getContext('2d');
    var parent = document.querySelector('.welcome'); // Calculate the screen size

    canvas.width = parent.offsetHeight;
    canvas.height = parent.offsetWidth;
    var maxDepth = 40;
    var particleAmount = 700;
    var speed = 0.05;
    var maxDistributionX;
    var maxDistributionY;
    var particles = new Array(particleAmount);

    var setWindowRelatedProperties = function setWindowRelatedProperties() {
      canvas.width = parent.offsetWidth;
      canvas.height = parent.offsetHeight;
      maxDistributionX = parent.offsetWidth / 8;
      maxDistributionY = parent.offsetHeight / 4;
    };

    setWindowRelatedProperties();
    window.addEventListener('resize', setWindowRelatedProperties);
    context.fillStyle = 'rgba(27,20,54)';
    context.fillRect(0, 0, canvas.width, canvas.height);

    var random = function random(min, max) {
      return Math.floor(Math.random() * (max - min)) + min;
    };

    var placeParticles = function placeParticles() {
      for (var i = 0; i < particles.length; i += 1) {
        particles[i] = {
          x: random(-maxDistributionX, maxDistributionX),
          y: random(-maxDistributionY, maxDistributionY),
          z: random(1, maxDepth)
        };
      }
    };

    var moveParticles = function moveParticles() {
      var centerX = canvas.width / 2;
      var centerY = canvas.height / 2; // .3 or .5 looks good, 1 for no shade

      context.fillStyle = 'rgba(27,20,54, .5)';
      context.fillRect(0, 0, canvas.width, canvas.height);

      for (var i = 0; i < particles.length; i += 1) {
        particles[i].z -= speed;

        if (particles[i].z <= 0) {
          particles[i].x = random(-maxDistributionX, maxDistributionX);
          particles[i].y = random(-maxDistributionY, maxDistributionY);
          particles[i].z = maxDepth;
        }

        var k = 100 / particles[i].z;
        var newX = particles[i].x * k + centerX;
        var newY = particles[i].y * k + centerY;

        if (newX >= 0 && newX <= window.innerWidth && newY >= 0 && newY <= window.innerHeight) {
          var size = (1 - particles[i].z / maxDepth) * 5;
          context.beginPath();
          context.fillStyle = '#ddd';
          context.arc(newX, newY, size / 2, 0, Math.PI * 2, false);
          context.closePath();
          context.fill();
        }
      }

      window.requestAnimationFrame(moveParticles);
    };

    placeParticles();
    window.requestAnimationFrame(moveParticles);
  })();
}
// CONCATENATED MODULE: ./src/scripts/main.js


menu();
starSky();

/***/ })
/******/ ]);